# Generated by Django 2.2.2 on 2019-06-28 13:04

import dirtyfields.dirtyfields
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import forsta_auth.base_user
import forsta_auth.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('verified', models.BooleanField(default=False)),
                ('primary', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
    if settings.AUTH_USER_MODEL == 'forsta_auth.User':
        operations = [
            migrations.CreateModel(
                name='User',
                fields=[
                    ('password', models.CharField(max_length=128, verbose_name='password')),
                    ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                    ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                    ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                    ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                    ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                    ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                    ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                    ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                    ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                    ('identity_id', models.UUIDField(blank=True, db_index=True, null=True)),
                    ('identity_type', models.CharField(blank=True, max_length=32)),
                    ('username', models.CharField(blank=True, max_length=256, null=True, unique=True, validators=[forsta_auth.base_user.UsernameValidator()])),
                    ('primary', models.BooleanField(help_text='Whether this is the primary account for the connected resource')),
                    ('must_have_password', models.BooleanField(default=False)),
                    ('must_have_mfa', models.BooleanField(default=False)),
                    ('must_use_password', models.BooleanField(default=False)),
                    ('state', models.CharField(max_length=32)),
                    ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                    ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ],
                options={
                    'abstract': False,
                },
                bases=(forsta_auth.base_user.KerberosBackedUserMixin, dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
                managers=[
                    ('objects', django.contrib.auth.models.UserManager()),
                ],
            ),
        ] + operations
